class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        # Reference: https://leetcode.com/problems/minimize-malware-spread-ii/solutions/184129/python-solution-with-my-thinking-process-with-extra-chinese-explanation/
        import collections
        n, infect = len(graph), collections.defaultdict(list)  # infect[i]: Node i will be directly infected by all the initial nodes in infect[i]
        for init in initial:
            visited, dq = set(initial), collections.deque([init])
            while dq:
                infected = dq.popleft()
                for node in range(n):
                    if graph[infected][node] and node not in visited:
                        visited.add(node)
                        infect[node].append(init)
                        dq.append(node)
        removable = [0] * n
        for node in infect:
            if len(infect[node]) == 1:  # node will be directly infected by exactly one initial node
                removable[infect[node][0]] += 1
        return min(initial) if not max(removable) else removable.index(max(removable))  # Choose the most frequent node
